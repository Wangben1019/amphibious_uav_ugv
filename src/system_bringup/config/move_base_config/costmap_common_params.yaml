# #机器人几何参，如果机器人是圆形，设置 robot_radius,如果是其他形状设置 footprint
# robot_radius: 0.3 #圆形
# # footprint: [[-0.12, -0.12], [-0.12, 0.12], [0.12, 0.12], [0.12, -0.12]] #其他形状

# obstacle_range: 2.5 # 用于障碍物探测，比如: 值为 3.0，意味着检测到距离小于 3 米的障碍物时，就会引入代价地图
# raytrace_range: 3.0 # 用于清除障碍物，比如：值为 3.5，意味着清除代价地图中 3.5 米以外的障碍物


# #膨胀半径，扩展在碰撞区域以外的代价区域，使得机器人规划路径避开障碍物
# inflation_radius: 0.4 # 器人的起始位置偏离了全球成本图
# map_type: costmap
# #导航包所需要的传感器
# observation_sources: scan
# #对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。
# scan: {sensor_frame: livox_frame, data_type: LaserScan, topic: /scan, marking: true, clearing: true}



#---standard pioneer footprint---
#---(in meters)---
#footprint: [ [0.254, -0.0508], [0.1778, -0.0508], [0.1778, -0.1778], [-0.1905, -0.1778], [-0.254, 0], [-0.1905, 0.1778], [0.1778, 0.1778], [0.1778, 0.0508], [0.254, 0.0508] ]
#footprint: [ [-0.2,-0.2], [0.2,-0.2], [0.2,0.2], [-0.2,0.2] ]
robot_radius: 0.3

transform_tolerance: 0.2

obstacle_layer:
 enabled: true
 obstacle_range: 5.0
 raytrace_range: 5.5
 inflation_radius: 0.2
 track_unknown_space: false
 combination_method: 1

 observation_sources: laser_scan_sensor
 laser_scan_sensor: {data_type: LaserScan, topic: /scan, marking: true, clearing: true}

#  observation_sources: pointcloud2_sensor
#  pointcloud2_sensor: {data_type: PointCloud2, topic: /icp_pointcloud, marking: true, clearing: true}


inflation_layer:
  enabled:              true
  cost_scaling_factor:  8.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.5  # max. distance from an obstacle at which costs are incurred for planning paths.

